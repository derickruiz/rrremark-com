{"version":3,"sources":["../../../assets/js/app.js"],"names":["console","log","autosize","ClickOutsideDirective","HANDLER","bind","el","binding","unbind","initialMacrotaskEnded","setTimeout","e","itsChildren","contains","target","value","document","documentElement","addEventListener","removeEventListener","Vue","directive","component","template","props","todos","type","Array","required","intentionIndex","Number","mounted","self","oldElementIndex","newElementIndex","dragula","$el","revertOnSpill","moves","container","handle","classList","on","add","style","opacity","prototype","indexOf","call","children","className","replace","$emit","Object","index","data","readyToDrag","methods","checkTodo","hasValue","todo","isEditing","text","nextTick","removeTodo","editTodo","previousCompleteStatus","isCompleted","previousValue","todoIndex","checkTodoCompleteStatus","event","stopEditingTodo","String","editFlag","Boolean","maxlength","default","UTILS","autoSizeAndFocus","update","updated","nonEditableClickHandler","editableKeyUpHandler","keyCode","trim","placeholder","computed","splicedNotes","note","split","numTimesPressedEnter","pressedBackSpaceOnLastChar","isBlank","editNote","stopEditing","updateNote","length","stopEditingNote","Communicator","Menu","isExpanded","projects","created","DATABASE","getProjects","expandMenu","isNotLast","result","loadProject","getSingleProject","key","project","Project","BLANK_PROJECT","showProjectStats","editingProjectTitle","isProjectEmpty","$forceUpdate","$on","removeEmptyIntentions","addTodo","intentions","push","splice","saveTodos","replaceTodos","reorderTodos","swapArrayElements","addIntention","isIntentionLast","removeIntention","calculateNotePlaceHolderMessage","saveIntentionNote","updateIntentionNote","isIntentionNoteEmpty","isIntentionEmpty","intentionHasTodos","hasAtLeastOneTodo","i","checkProjectTitle","title","createProject","projectReference","updateProjectTitle","$refs","editProjectTitle","stopEditingProjectTitle"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\n\n    console.log(\"Autosize defined?\", autosize);\n\n    // Directives\n\n    let ClickOutsideDirective = {\n\n        HANDLER: '_vue_click_outside_handler',\n\n        bind(el, binding) {\n\n            ClickOutsideDirective.unbind(el);\n\n            console.log(\"Calling the bind method for v-click-outside\");\n\n            // make a event handler for click event\n\n            console.log(\"el\", el);\n            console.log(\"binding\", binding);\n\n            let initialMacrotaskEnded = false;\n\n            setTimeout(function() {\n                initialMacrotaskEnded = true;\n            }, 0);\n\n            el[ClickOutsideDirective.HANDLER] = (e) => {\n\n                // Is the target child of the component?\n                const itsChildren = el.contains(e.target);\n\n                // When there is no delay, usually not followed by v-if, v-show, v-cloak directive\n                console.log(\"CLICK AND ABOUT TO CALL BINDING EXPRESSION\");\n\n                if (initialMacrotaskEnded && e.target != el && !itsChildren) {\n                    console.log(\"About to call the binding value expression func.\");\n                    binding.value(e);\n                }\n\n            };\n\n            // Attach Event Listener to body\n            document.documentElement.addEventListener('click', el[ClickOutsideDirective.HANDLER], false);\n        },\n\n        unbind(el) {\n            // Remove Event Listener from body\n            document.documentElement.removeEventListener('click', el[ClickOutsideDirective.HANDLER], false);\n        }\n    };\n\n    Vue.directive('click-outside', ClickOutsideDirective);\n\n    // Components\n\n    // Takes create of dragging and dropping of todos\n    Vue.component('todos', {\n        template: \"#vue_tmpl_todos\",\n        props: {\n            todos: {\n                type: Array,\n                required: true\n            },\n            intentionIndex: {\n                type: Number,\n                required: true\n            }\n        },\n        mounted: function () {\n\n            console.log(\"todos.mounted\");\n            console.log(\"What's this?\", this);\n\n            const self = this;\n            let oldElementIndex, // The index of the todo before dragging begins.\n                newElementIndex; // The index of the todo after dragging ends.\n\n            dragula([this.$el], {\n                revertOnSpill: true,\n                moves: function (el, container, handle) {\n                    return handle.classList.contains(\"Todo-drag\");\n                }\n            })\n            .on('over', function (el, container) {\n                container.classList.add(\"Todos--dragging\");\n                el.style.opacity = 1;\n\n                oldElementIndex = Array.prototype.indexOf.call(container.children, el);\n\n            }).on('out', function (el, container) {\n                container.className = container.className.replace(\"Todos--dragging\", \"\");\n                el.style.opacity = null;\n\n                newElementIndex = Array.prototype.indexOf.call(container.children, el);\n\n                console.log(\"dragula out event.\");\n                console.log(\"What's self.todos?\", self.todos);\n                console.log(\"What's self.intentionIndex?\", self.intentionIndex);\n                console.log(\"What's oldElementIndex?\", oldElementIndex);\n                console.log(\"What's newElementIndex?\", newElementIndex);\n\n                // The index of the todo actually changed and is in a new position\n                if (oldElementIndex !== newElementIndex) {\n                    self.$emit(\"reorder-todos\", self.intentionIndex, oldElementIndex, newElementIndex);\n                }\n\n            });\n        },\n    });\n\n    Vue.component('todo', {\n        template: \"#vue_tmpl_todo\",\n        props: {\n            value: {\n                type: Object,\n                required: true\n            },\n            index: {\n                type: Number\n            }\n        },\n        data: function () {\n            return {\n                readyToDrag: false\n            };\n        },\n        methods: {\n\n            /*\n             * @description - Remove a todo if it's empty, and stop editing if it's not\n             * @prop hasValue:Boolean, whether the todo has a value\n             */\n            checkTodo: function (hasValue, value) {\n\n                let todo = this.value;\n\n                if (hasValue) {\n                    todo.isEditing = false;\n                    todo.text = value;\n                    this.$emit('input', todo);\n\n                    Vue.nextTick(() => {\n                        this.$emit('save-todos');\n                    });\n\n                } else {\n                    this.removeTodo(this.index);\n                }\n            },\n\n            /*\n             * @description - Make sure the todo can be edited.\n             * @return Void\n             */\n            editTodo: function () {\n                console.log(\"Todo.editTodo\");\n                let todo = this.value;\n\n                todo.isEditing = true;\n\n                this.previousCompleteStatus = todo.isCompleted;\n                this.previousValue = todo.text;\n\n                todo.isCompleted = false;\n\n                this.$emit('input', todo);\n            },\n\n            /*\n             * @description - Remove this todo by emitting an event up to the project\n             * @prop todoIndex:Number - the index of the todo to be removed.\n             * @return Void\n             */\n            removeTodo: function (todoIndex) {\n                console.log(\"Todo.removeTodo\");\n                this.$emit(\"remove-todo\", todoIndex);\n            },\n\n            checkTodoCompleteStatus: function (event) {\n\n                let todo = this.value;\n                this.previousCompleteStatus = todo.isCompleted;\n\n                this.$emit('save-todos');\n            },\n\n            stopEditingTodo: function () {\n                console.log(\"Todo.stopEditingTodo\");\n\n                let todo = this.value;\n\n                if (todo.text !== \"\") {\n                    todo.isEditing = false;\n\n                    // When you edit a todo the complete status gets set to false.\n                    // This checks if the text of the todo didn't change\n                    // and sets the completedStatus back to what it was\n                    if (todo.text === this.previousValue) {\n                        todo.isCompleted = this.previousCompleteStatus;\n                    }\n\n                    this.$emit('input', todo);\n\n                    Vue.nextTick(() => {\n                        this.$emit('save-todos');\n                    });\n\n                } else {\n                    this.removeTodo(this.index);\n                }\n\n            }\n        }\n    });\n\n    Vue.component('editable', {\n        template: \"#vue_tmpl_editable\",\n        props: {\n            value: {\n                type: String,\n                required: true\n            },\n            editFlag: {\n                type: Boolean,\n                required: true\n            },\n            maxlength: {\n                type: Number,\n                required: false,\n                default: 60\n            }\n        },\n        mounted: function () {\n            console.log(\"editable.mounted\");\n            if (this.editFlag) {\n                UTILS.autoSizeAndFocus(this.$el);\n                autosize.update(this.$el);\n            }\n        },\n        updated: function () {\n            if (this.editFlag) {\n                UTILS.autoSizeAndFocus(this.$el);\n                autosize.update(this.$el);\n            }\n        },\n        methods: {\n            nonEditableClickHandler: function (event) {\n                this.$emit('non-editable-click');\n            },\n            editableKeyUpHandler: function (event) {\n                console.log(\"editableKeyUpHandler\");\n                console.log(\"What's event?\", event);\n\n                if (event.keyCode === 13) { // enter\n                    console.log(\"Pressed enter?\");\n\n                    if (this.$el.value && this.$el.value.trim() !== \"\") {\n                        this.$emit('editable-key-up', true);\n                    } else {\n                        this.$emit('editable-key-up', false);\n                    }\n\n                }\n\n                this.$emit('input', this.$el.value.trim());\n\n            }\n        }\n    });\n\n    Vue.component('note', {\n        template: \"#vue_tmpl_note\",\n        props: {\n            value: {\n                type: Object,\n                required: true\n            },\n            placeholder: {\n                type: String,\n                required: true\n            }\n        },\n        computed: {\n            splicedNotes: function () {\n                let note = this.value;\n                return note.text.split(\"\\n\\n\");\n            }\n        },\n        data: function () {\n            return {\n                numTimesPressedEnter: 0,\n                pressedBackSpaceOnLastChar: false\n            };\n        },\n        mounted: function () {\n            let note = this.value;\n\n            if (note.isEditing) {\n                UTILS.autoSizeAndFocus(this.$el);\n            }\n        },\n        updated: function () {\n            let note = this.value;\n\n            if (note.isEditing) {\n                UTILS.autoSizeAndFocus(this.$el);\n            }\n        },\n        methods: {\n\n            /*\n             * @description - Checks if the text of the note is completely blank\n             * @return Boolean\n             */\n            isBlank: function () {\n                console.log('note.isBlank');\n                let note = this.value;\n                console.log(\"Whats's note?\", note);\n                return note.text === \"\";\n            },\n\n            /*\n             * @description - Sets the note to editable\n             * @return Void\n             */\n            editNote: function (event) {\n                let note = this.value;\n                note.isEditing = true;\n\n                this.$emit('input', note);\n            },\n\n            /*\n             * @descrpition - Switches the note back to the uneditable state\n             * @return Void\n             */\n            stopEditing: function (event) {\n                let note = this.value;\n                note.isEditing = false;\n\n                this.$emit('input', note);\n            },\n\n\n            updateNote: function (event) {\n                console.log(\"note.updateNote\");\n\n                let note = this.value;\n                note.text = event.target.value.trim();\n\n                console.log(\"event.target.value.trim()\", event.target.value.trim());\n                console.log(\"event\", event);\n                console.log(\"event.target.value\", event.target.value);\n\n                if (event.keyCode === 8) { // Backspace\n                    console.log(\"Pressed backspace\");\n                    if (note.text.length === 1) {\n                        console.log(\"And the length of the note is only one.\");\n                        note.text = \"\";\n                        this.$emit('input', note);\n                        return;\n                    }\n                }\n\n                if (event.keyCode === 13) {\n                    this.numTimesPressedEnter += 1;\n                } else {\n                    this.numTimesPressedEnter = 0;\n                }\n\n                // Stop editing after pressing enter 3 times without there being any other key presses.\n                if (this.numTimesPressedEnter >= 3) {\n                    console.log(\"Pressed enter three times.\");\n                    note.isEditing = false;\n                    note.text = event.target.value.split(\"\\n\\n\\n\")[0].trim();\n                    this.numTimesPressedEnter = 0; // Reset it for next time\n\n                    this.$emit('save-note', note);\n                }\n\n                console.log(\"What's note?\", note);\n                console.log(\"note.text\", note.text);\n                console.log(\"About to emit an input event\");\n                this.$emit('input', note);\n            },\n\n            stopEditingNote: function () {\n\n                console.log(\"Note.stopEditingNote\");\n                let note = this.value;\n\n                console.log(\"note.text\", note.text);\n                if (note.text !== \"\") {\n                    note.isEditing = false;\n                    note.text = note.text.split(\"\\n\\n\\n\")[0].trim();\n                    this.numTimesPressedEnter = 0; // Reset it for next time\n\n                    this.$emit('save-note', note);\n                }\n            }\n        }\n    });\n\n    let Communicator = new Vue(); // A vue instance to communicate via events through Menu and Project.\n\n    let Menu = new Vue({\n        el: \"#vue_menu\",\n        data: {\n            isExpanded: false,\n            projects: []\n        },\n        created: function () {\n\n            console.log(\"DATABASE.getProjects()\");\n\n            DATABASE.getProjects(projects => {\n                console.log(\"What's this?\", this);\n                console.log(\"What's projects?\", projects);\n                this.projects = projects;\n            });\n\n            console.log(\"Calling listen projects\");\n            /* DATABASE.listenProjects(projects => {\n                console.log(\"What's projects?\", projects);\n                this.projects = projects;\n            }); */\n        },\n        methods: {\n            expandMenu: function () {\n                this.isExpanded = !this.isExpanded;\n            },\n            isNotLast: function (index) { // Checks if the current index is in the last position of the array.\n                const result = (this.projects.length - 1) === index;\n                return ! result;\n            },\n            loadProject: function (index) {\n\n                DATABASE.getSingleProject(this.projects[index].key, project => {\n                    Communicator.$emit('get-project', project);\n                    this.expandMenu();\n                });\n            }\n        }\n    });\n\n    let Project = new Vue({\n        el: \"#vue_project\",\n        data: {\n            project: BLANK_PROJECT,\n            showProjectStats: true,\n            editingProjectTitle: true\n        },\n        created: function () {\n\n            const self = this;\n\n            // A couple of things should happen if the project is completely blank. Probably a new one.\n            if (this.isProjectEmpty()) {\n                console.log(\"Project is completely empty.\");\n\n                this.showProjectStats = false; // Don't show the project stats just yet.\n                this.editingProjectTitle = true; // Immeditely make the project title editable and focus on it.\n\n                this.$forceUpdate();\n            }\n\n            /* firebase.auth().onAuthStateChanged(user => {\n                if (user) {\n                    DATABASE.getDefaultProject(project => {\n                        if (project) {\n                            this.project = project;\n                            this.editingProjectTitle = false;\n                            this.showProjectStats = true;\n                            this.$forceUpdate();\n                        }\n                    });\n                }\n            }); */\n\n            this.$on('remove-empty-intentions', this.removeEmptyIntentions);\n\n            Communicator.$on('get-project', project => {\n                console.log(\"Communicator.$on(get-project)\");\n                console.log(\"What's the project?\", project);\n                console.log(\"What's this.editingProjetTitle?\", this.editingProjectTitle);\n                this.project = project;\n                console.log(\"What's this.editingProjetTitle (after setting this.project)?\", this.editingProjectTitle);\n                console.log(\"this\", this);\n\n                this.editingProjectTitle = false;\n\n                console.log(\"Project.created\");\n                console.log(\"this.project\", this.project);\n\n            });\n\n        },\n        methods: {\n\n            /*\n             * @description - Adds a todo to the intention\n             * @prop intentionIndex:Number - the intention to add it to\n             */\n            addTodo: function (intentionIndex) {\n\n                const todos = this.project.intentions[intentionIndex].todos;\n\n                // Turn off editable note if they click the addTodo button.\n                this.project.intentions[intentionIndex].note.isEditing = false;\n\n                // There should only ever be one blank todo at the end to prevent adding multiple blanks\n                // so if the todo at the end of an intention is blank, just go ahead and delete it if you try\n                // and add a new one.\n                if (todos.length >= 1) {\n                    if (todos[todos.length - 1].text === \"\") {\n                        this.removeTodo(intentionIndex, todos.length - 1);\n                    }\n                }\n\n                // Go ahead and add another one.\n                this.project.intentions[intentionIndex].todos.push({\n                    text: \"\",\n                    isCompleted: false,\n                    isEditing: true\n                });\n\n            },\n\n            /*\n             * @description - Remove a specific todo from a specific intention\n             * @prop intentionIndex:Number - the index of the intention\n             * @prop todoIndex:Number - the index of the todo\n             * @return Void\n             */\n            removeTodo: function (intentionIndex, todoIndex) {\n                console.log(\"Calling Project.removeTodo\");\n                this.project.intentions[intentionIndex].todos.splice(todoIndex, 1);\n                this.$emit('remove-empty-intentions');\n            },\n\n            saveTodos: function (intentionIndex) {\n                console.log(\"Project.saveTodos\");\n                console.log(\"What's the intentionIndex?\", intentionIndex);\n                console.log(\"this.project.key\", this.project.key);\n                console.log(\"todos\", this.project.intentions[intentionIndex].todos);\n\n                DATABASE.replaceTodos(this.project.key, intentionIndex, this.project.intentions[intentionIndex].todos, function () { });\n            },\n\n            /*\n             * @description - Re orders the todos for an intention by swapping out two elements. Run after dragging and dropping\n             * @param intentionIndex:Number - The index of the intention\n             * @param oldElementIndex:Number - the index of the todo to switch\n             * @param newElementIndex:Number - the index of the todo to switch\n             */\n            reorderTodos: function (intentionIndex, oldElementIndex, newElementIndex) {\n                console.log(\"Project.reorderTodos\");\n                this.project.intentions[intentionIndex].todos = UTILS.swapArrayElements(this.project.intentions[intentionIndex].todos, oldElementIndex, newElementIndex);\n                this.saveTodos(intentionIndex);\n            },\n\n            /*\n             * @description - Adds a new intention to the project\n             * @prop intentionIndex:Number - Adds the new intention after the intention index that was passed in\n             * @return Void\n             */\n            addIntention: function (intentionIndex) {\n                console.log(\"Project.addIntention\");\n\n                if (this.isIntentionLast(intentionIndex)) {\n                    this.project.intentions.push({\n                        note: {\n                            text: \"\",\n                            isEditing: true\n                        },\n                        todos: []\n                    });\n                } else {\n                    this.project.intentions.splice(intentionIndex + 1, 0, {\n                        note: {\n                            text: \"\",\n                            isEditing: true\n                        },\n                        todos: []\n                    });\n                }\n            },\n\n            /*\n             * @description - Remove a specific intention from the project\n             * @prop intentionIndex:Number - the index of the intention\n             * @return Void\n             */\n            removeIntention: function (intentionIndex) {\n                console.log(\"Project.removeIntention\");\n                this.project.intentions.splice(intentionIndex, 1);\n            },\n\n            /*\n             * @description - The placeholder of a note changes based on whether the project is empty or not, this method gets the right one.\n             * @return Void\n             */\n            calculateNotePlaceHolderMessage: function () {\n                if (this.isProjectEmpty()) {\n                    return \"Define the approach to the project by writing some notes\";\n                } else {\n                    return \"Add another note\"\n                }\n            },\n\n            saveIntentionNote: function (intentionIndex, note) {\n                console.log(\"Project.saveIntentionNote\");\n                console.log(\"What's intentionIndex?\", intentionIndex);\n                console.log(\"What's note?\", note);\n\n                DATABASE.updateIntentionNote(this.project.key, intentionIndex, this.project.intentions[intentionIndex].note.text);\n            },\n\n            /*\n             * @description - Calculates whether a note for an intention is empty or not\n             * @prop intentionIndex:Number - the index of the intention to check\n             * @return Boolean\n             */\n            isIntentionNoteEmpty: function (intentionIndex) {\n                console.log(\"Project.isIntentionNoteEmpty\");\n                return this.project.intentions[intentionIndex].note.text === \"\";\n            },\n            /*\n             * @description - Calculates whether the passed intention index is the last one in the project\n             * @prop intentionIndex:Number - The index of the intention to check\n             * @return Boolean\n             */\n            isIntentionLast: function (intentionIndex) {\n                if (intentionIndex + 1 === this.project.intentions.length) {\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n\n            /*\n             * @description - Checks if the intention is completely empty (No note and no todos at all)\n             * @prop intentionIndex:Number - the intention to check\n             * @return Boolean\n             */\n            isIntentionEmpty: function (intentionIndex) {\n                return this.isIntentionNoteEmpty(intentionIndex) && this.project.intentions[intentionIndex].todos.length === 0;\n            },\n\n            /*\n             * @description - Checks if the project is completely empty (Only one single completely blank intention)\n             * @return Boolean\n             */\n            isProjectEmpty: function () {\n                // New projects will always start off with at least a single and empty intention\n                return this.isIntentionLast(0) && this.isIntentionEmpty(0) && this.isIntentionNoteEmpty(0);\n            },\n\n            /*\n             * @description - Checks if an intention has at least one todo.\n             * @prop intentionIndex:Number - The index of the intention\n             * @return Boolean\n             */\n            intentionHasTodos: function (intentionIndex) {\n                console.log(\"Project.intentionHasTodos\");\n                return this.project.intentions[intentionIndex].todos && this.project.intentions[intentionIndex].todos.length >= 1;\n            },\n\n            /*\n             * @description - Checks if there is at least one todo in the intention and that it's not blank\n             * @prop intentionIndex:Number - the index of the intention\n             * @return Boolean\n             */\n            hasAtLeastOneTodo: function (intentionIndex) {\n\n                const todos = this.project.intentions[intentionIndex].todos;\n\n                if (todos.length === 1) {\n                    // The text shouldn't be blank if there's only one.\n                    return todos && todos.length === 1 && todos[0].text !== \"\";\n                }\n\n                if (todos.length === 0) {\n                    return false;\n                }\n\n                if (todos.length > 1) {\n                    return true;\n                }\n            },\n\n            /*\n             * @description - Checks the project for empty intentions and removes them all\n             * @return Void\n             */\n            removeEmptyIntentions: function () {\n\n                if (this.project.intentions.length >= 2) {\n                    for (let i = 0; i < this.project.intentions.length; i += 1) {\n                        if (this.project.intentions[i].note.text === \"\" && this.project.intentions[i].todos.length === 0) {\n                            this.removeIntention(i);\n                        }\n                    }\n                }\n            },\n\n            checkProjectTitle: function (hasValue) {\n                console.log(\"Project.checkProjectTitle\");\n                if (hasValue) {\n                    this.editingProjectTitle = false;\n\n                    console.log(\"What's project key?\", this.project.key);\n                    console.log(\"What's the new title?\", this.project.title);\n                    console.log(\"About to update the title on the server\");\n\n                    if ( ! this.project.key) { // There's no key for this project, so let's treat it as a new one.\n                        DATABASE.createProject(this.project.title, projectReference => {\n                            if (projectReference) {\n                                // Go ahead and set up the project key reference\n                                this.project.key = projectReference.key;\n                                // Now let's actually save the project\n                                DATABASE.updateProjectTitle(this.project.key, this.project.title);\n                            }\n                        });\n                    } else { // Go ahead and update the project's title\n                        DATABASE.updateProjectTitle(this.project.key, this.project.title);\n                    }\n\n\n                    // If the project is empty, I want to focus on the next (empty) note immeditely.\n                    if (this.isProjectEmpty()) {\n                        console.log(\"Is the project empty?\");\n                        console.log(\"What's this.$refs?\", this.$refs);\n                        // Immeditely focus on the first note if the project is empty.\n                        this.project.intentions[0].note.isEditing = true;\n                    }\n\n                }\n            },\n\n            editProjectTitle: function () {\n                console.log(\"Project.editProjectTitle\");\n                this.editingProjectTitle = true;\n            },\n\n            /*\n             * Stops editing the project title if it has some value\n             * @return Void\n             */\n            stopEditingProjectTitle: function () {\n                console.log(\"Project.stopEditingProjectTitle\");\n                if (this.project.title !== \"\") {\n                    this.editingProjectTitle = false;\n                }\n            }\n        }\n    });\n\n}());"]}