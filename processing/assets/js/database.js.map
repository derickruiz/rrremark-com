{"version":3,"sources":["../../../assets/js/database.js"],"names":["config","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","firebase","initializeApp","database","console","log","auth","currentUser","DATABASE","getProjects","callback","projects","onAuthStateChanged","user","ref","uid","on","snapshot","forEach","childSnapshot","data","val","key","getKey","push","getSingleProject","projectKey","userid","once","project","intentions","intention","note","isEditing","todos","todo","setDefaultProject","createProject","projectTitle","newProjectRef","updateObj","update","getDefaultProject","updateProjectTitle","updateIntentionNote","intentionIndex","noteText","replaceTodos","unCompletedTodos","completedTodos","isCompleted","loginInUser","email","password","errorCallback","signInWithEmailAndPassword","catch","error","message","signUpUser","createUserWithEmailAndPassword"],"mappings":";;;;AAAA;AACA,IAAIA,SAAS;AACTC,YAAQ,yCADC;AAETC,gBAAY,gCAFH;AAGTC,iBAAa,uCAHJ;AAITC,mBAAe,4BAJN;AAKTC,uBAAmB;AALV,CAAb;;AAQAC,SAASC,aAAT,CAAuBP,MAAvB;;AAEA,IAAMQ,WAAWF,SAASE,QAAT,EAAjB;;AAEAC,QAAQC,GAAR,CAAY,qBAAZ,EAAmCJ,SAASK,IAAT,GAAgBC,WAAnD;;AAEA,IAAMC,WAAW;;AAEb;;;;AAIAC,eANa,uBAMDC,QANC,EAMS;;AAElBN,gBAAQC,GAAR,CAAY,sBAAZ;;AAEA,YAAIM,WAAW,EAAf;;AAEAV,iBAASK,IAAT,GAAgBM,kBAAhB,CAAmC,gBAAQ;AACvC,gBAAIC,IAAJ,EAAU;AACNZ,yBAASE,QAAT,GAAoBW,GAApB,CAAwB,iBAAiBD,KAAKE,GAA9C,EAAmDC,EAAnD,CAAsD,OAAtD,EAA+D,UAAUC,QAAV,EAAoB;;AAE/E;AACA;AACAN,+BAAW,EAAX;;AAEAP,4BAAQC,GAAR,CAAY,kBAAZ,EAAgCY,QAAhC;;AAEAA,6BAASC,OAAT,CAAiB,UAAUC,aAAV,EAAyB;AACtC,4BAAIC,OAAOD,cAAcE,GAAd,EAAX;AACAD,6BAAKE,GAAL,GAAWH,cAAcI,MAAd,EAAX;AACAZ,iCAASa,IAAT,CAAcJ,IAAd;AACH,qBAJD;;AAMAV,6BAASC,QAAT;AAEH,iBAhBD;AAiBH;AACJ,SApBD;AAqBH,KAjCY;;;AAmCb;;;;;AAKAc,oBAxCa,4BAwCIC,UAxCJ,EAwCgBhB,QAxChB,EAwC0B;AACnCN,gBAAQC,GAAR,CAAY,2BAAZ;;AAEA,YAAMsB,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEA,YAAIY,MAAJ,EAAY;AACR1B,qBAASE,QAAT,GAAoBW,GAApB,CAAwB,cAAca,MAAd,GAAuB,GAAvB,GAA6BD,UAArD,EAAiEE,IAAjE,CAAsE,OAAtE,EAA+E,UAAUX,QAAV,EAAoB;AAC/F,oBAAIY,UAAUZ,SAASI,GAAT,EAAd;AACAQ,wBAAQP,GAAR,GAAcL,SAASK,GAAvB;;AAEAO,wBAAQC,UAAR,CAAmBZ,OAAnB,CAA4B,qBAAa;AACrC;AACA,wBAAI,OAAOa,UAAUC,IAAV,CAAeC,SAAtB,KAAoC,WAAxC,EAAqD;AACjDF,kCAAUC,IAAV,CAAeC,SAAf,GAA2B,KAA3B;AACH;;AAED;AACA,wBAAI,OAAOF,UAAUG,KAAjB,KAA2B,WAA/B,EAA4C;AACxCH,kCAAUG,KAAV,GAAkB,EAAlB;AACH,qBAFD,MAEO;AACHH,kCAAUG,KAAV,CAAgBhB,OAAhB,CAAyB,gBAAQ;AAC7BiB,iCAAKF,SAAL,GAAiB,KAAjB;AACH,yBAFD;AAGH;AAEJ,iBAfD;;AAiBAvB,yBAASmB,OAAT;AACArB,yBAAS4B,iBAAT,CAA2BV,UAA3B;AACH,aAvBD;AAwBH;AACJ,KAvEY;;;AAyEb;;AAEAW,iBA3Ea,yBA2ECC,YA3ED,EA2Ee5B,QA3Ef,EA2EyB;AAClCT,iBAASK,IAAT,GAAgBM,kBAAhB,CAAmC,UAAUC,IAAV,EAAgB;AAC/C,gBAAIA,IAAJ,EAAU;AACN,oBAAI0B,gBAAgBtC,SAASE,QAAT,GAAoBW,GAApB,CAAwB,eAAeD,KAAKE,GAA5C,EAAiDS,IAAjD,EAApB;AACAd,yBAAS6B,aAAT;AACH;AACJ,SALD;AAMH,KAlFY;;;AAoFb;;;AAGAH,qBAvFa,6BAuFKV,UAvFL,EAuFiB;AAC1B,YAAMC,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEA,YAAIyB,gCACC,qBAAqBb,MADtB,EAC+BD,UAD/B,CAAJ;;AAIAzB,iBAASE,QAAT,GAAoBW,GAApB,GAA0B2B,MAA1B,CAAiCD,SAAjC;AACH,KA/FY;;;AAiGb;AACAE,qBAlGa,6BAkGKhC,QAlGL,EAkGe;AACxBN,gBAAQC,GAAR,CAAY,4BAAZ;;AAEA,YAAMsB,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEAd,iBAASE,QAAT,GAAoBW,GAApB,CAAwB,qBAAqBa,MAA7C,EAAqDC,IAArD,CAA0D,OAA1D,EAAmE,UAAUX,QAAV,EAAoB;AACnF,gBAAIA,SAASI,GAAT,MAAkBJ,SAASI,GAAT,OAAmB,EAAzC,EAA6C;AACzCb,yBAASiB,gBAAT,CAA0BR,SAASI,GAAT,EAA1B,EAA0CX,QAA1C;AACH,aAFD,MAEO;AACHA,yBAAS,KAAT;AACH;AACJ,SAND;AAOH,KA9GY;;;AAgHb;;;;;AAKAiC,sBArHa,8BAqHMjB,UArHN,EAqHkBY,YArHlB,EAqHgC5B,QArHhC,EAqH0C;AAAA;;AAEnD,YAAMiB,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEA,YAAIyB,4DACC,iBAAiBb,MAAjB,GAA0B,GAA1B,GAAgCD,UAAhC,GAA6C,QAD9C,EACyDY,YADzD,gCAEC,cAAcX,MAAd,GAAuB,GAAvB,GAA6BD,UAA7B,GAA0C,QAF3C,EAEsDY,YAFtD,eAAJ;;AAKAlC,gBAAQC,GAAR,CAAY,mBAAZ,EAAiCmC,SAAjC;;AAEA,eAAOvC,SAASE,QAAT,GAAoBW,GAApB,GAA0B2B,MAA1B,CAAiCD,SAAjC,EAA4C9B,QAA5C,CAAP;AACH,KAjIY;AAmIbkC,uBAnIa,+BAmIOlB,UAnIP,EAmImBmB,cAnInB,EAmImCC,QAnInC,EAmI6CpC,QAnI7C,EAmIuD;AAChEN,gBAAQC,GAAR,CAAY,8BAAZ;;AAEA,YAAMsB,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEA,YAAIyB,gCACC,cAAcb,MAAd,GAAuB,GAAvB,GAA6BD,UAA7B,GAA0C,cAA1C,GAA2DmB,cAA3D,GAA4E,YAD7E,EAC4FC,QAD5F,CAAJ;;AAIA1C,gBAAQC,GAAR,CAAY,mBAAZ,EAAiCmC,SAAjC;;AAEA,eAAOvC,SAASE,QAAT,GAAoBW,GAApB,GAA0B2B,MAA1B,CAAiCD,SAAjC,EAA4C9B,QAA5C,CAAP;AACH,KA/IY;;;AAiJb;;;;;;;AAOAqC,gBAxJa,wBAwJArB,UAxJA,EAwJYmB,cAxJZ,EAwJ4BX,KAxJ5B,EAwJmCxB,QAxJnC,EAwJ6C;AAAA;;AAEtD,YAAMiB,SAAS1B,SAASK,IAAT,GAAgBC,WAAhB,CAA4BQ,GAA3C;;AAEA,YAAIiC,mBAAmB,CAAvB;AAAA,YACIC,iBAAiB,CADrB;;AAGAf,cAAMhB,OAAN,CAAc,gBAAQ;AAClB,gBAAIiB,KAAKe,WAAT,EAAsB;AAClBD,kCAAkB,CAAlB;AACH,aAFD,MAEO;AACHD,oCAAoB,CAApB;AACH;AACJ,SAND;;AAQA,YAAIR,4DACC,cAAcb,MAAd,GAAuB,GAAvB,GAA6BD,UAA7B,GAA0C,cAA1C,GAA2DmB,cAA3D,GAA4E,QAD7E,EACwFX,KADxF,gCAGC,cAAcP,MAAd,GAAuB,GAAvB,GAA6BD,UAA7B,GAA0C,iBAH3C,EAG+DuB,cAH/D,gCAIC,iBAAiBtB,MAAjB,GAA0B,GAA1B,GAAgCD,UAAhC,GAA6C,iBAJ9C,EAIkEuB,cAJlE,gCAMC,cAActB,MAAd,GAAuB,GAAvB,GAA6BD,UAA7B,GAA0C,mBAN3C,EAMiEsB,gBANjE,gCAOC,iBAAiBrB,MAAjB,GAA0B,GAA1B,GAAgCD,UAAhC,GAA6C,mBAP9C,EAOoEsB,gBAPpE,eAAJ;;AAUA,eAAO/C,SAASE,QAAT,GAAoBW,GAApB,GAA0B2B,MAA1B,CAAiCD,SAAjC,EAA4C9B,QAA5C,CAAP;AACH,KAlLY;;;AAoLb;AACAyC,eArLa,uBAqLDC,KArLC,EAqLMC,QArLN,EAqLgBC,aArLhB,EAqL+B;AACxCrD,iBAASK,IAAT,GAAgBiD,0BAAhB,CAA2CH,KAA3C,EAAkDC,QAAlD,EAA4DG,KAA5D,CAAkE,UAAUC,KAAV,EAAiB;AAC/ErD,oBAAQC,GAAR,CAAY,qCAAZ;AACAD,oBAAQC,GAAR,CAAY,OAAZ,EAAqBoD,KAArB;AACAH,0BAAcG,MAAMC,OAApB;AACH,SAJD;AAKH,KA3LY;AA6LbC,cA7La,sBA6LFP,KA7LE,EA6LKC,QA7LL,EA6LeC,aA7Lf,EA6L8B;AACvCrD,iBAASK,IAAT,GAAgBsD,8BAAhB,CAA+CR,KAA/C,EAAsDC,QAAtD,EAAgEG,KAAhE,CAAsE,UAAUC,KAAV,EAAiB;AACnFH,0BAAcG,MAAMC,OAApB;AACH,SAFD;AAGH;AAjMY,CAAjB","file":"database.js","sourcesContent":["// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyCfilMPI3GT5ujZPcowVwHFIaknVa3uc3U\",\n    authDomain: \"rrremark-7fa66.firebaseapp.com\",\n    databaseURL: \"https://rrremark-7fa66.firebaseio.com\",\n    storageBucket: \"rrremark-7fa66.appspot.com\",\n    messagingSenderId: \"27202409223\"\n};\n\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\n\nconsole.log(\"What's currentUser?\", firebase.auth().currentUser);\n\nconst DATABASE = {\n\n    /*\n     * Gets all projects (very soon will only get projects for a specific user)\n     * @param callback:Function\n     */\n    getProjects(callback) {\n\n        console.log(\"DATABASE.getProjects\");\n\n        var projects = [];\n\n        firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                firebase.database().ref('projectList/' + user.uid).on('value', function (snapshot) {\n\n                    // Make sure to empty out this array so it doesn't get computed when the\n                    // value function eventually gets called again.\n                    projects = [];\n\n                    console.log(\"What's snapshot?\", snapshot);\n\n                    snapshot.forEach(function (childSnapshot) {\n                        let data = childSnapshot.val();\n                        data.key = childSnapshot.getKey();\n                        projects.push(data);\n                    });\n\n                    callback(projects);\n\n                });\n            }\n        });\n    },\n\n    /*\n     * Gets a single project (with all intentions)\n     * @param projectKey:String - the key associated with the project in the database\n     * @param callback:Function\n     */\n    getSingleProject(projectKey, callback) {\n        console.log(\"DATABASE.getSingleProject\");\n\n        const userid = firebase.auth().currentUser.uid;\n\n        if (userid) {\n            firebase.database().ref('projects/' + userid + \"/\" + projectKey).once('value', function (snapshot) {\n                let project = snapshot.val();\n                project.key = snapshot.key;\n\n                project.intentions.forEach( intention => {\n                    // Setting up a couple of defaults for UI editing purposes\n                    if (typeof intention.note.isEditing === \"undefined\") {\n                        intention.note.isEditing = false;\n                    }\n\n                    // Empty todos if there aren't any\n                    if (typeof intention.todos === \"undefined\") {\n                        intention.todos = [];\n                    } else {\n                        intention.todos.forEach( todo => {\n                            todo.isEditing = false;\n                        });\n                    }\n\n                });\n\n                callback(project);\n                DATABASE.setDefaultProject(projectKey);\n            });\n        }\n    },\n\n    /* Create a new project for the current user\n     * @prop projectTitle:String - The title of the new project */\n    createProject(projectTitle, callback) {\n        firebase.auth().onAuthStateChanged(function (user) {\n            if (user) {\n                let newProjectRef = firebase.database().ref(\"/projects/\" + user.uid).push();\n                callback(newProjectRef);\n            }\n        });\n    },\n\n    /* Sets the default project for the user to get upon load\n     * @param projectKey:String - the string of the project\n     */\n    setDefaultProject(projectKey) {\n        const userid = firebase.auth().currentUser.uid;\n\n        let updateObj = {\n            ['defaultProjects/' + userid]: projectKey\n        };\n\n        firebase.database().ref().update(updateObj);\n    },\n\n    /* Gets the default project for the user if there is one */\n    getDefaultProject(callback) {\n        console.log(\"DATABASE.getDefaultProject\");\n\n        const userid = firebase.auth().currentUser.uid;\n\n        firebase.database().ref('defaultProjects/' + userid).once('value', function (snapshot) {\n            if (snapshot.val() && snapshot.val() !== \"\") {\n                DATABASE.getSingleProject(snapshot.val(), callback);\n            } else {\n                callback(false);\n            }\n        });\n    },\n\n    /*\n     * Updates the title for a project\n     * @param projectKey:String - The key associated with the project\n     * @param projectTitle:String - The new project title\n     */\n    updateProjectTitle(projectKey, projectTitle, callback) {\n\n        const userid = firebase.auth().currentUser.uid;\n\n        let updateObj = {\n            ['projectList/' + userid + \"/\" + projectKey + '/title']: projectTitle,\n            ['projects/' + userid + \"/\" + projectKey + '/title']: projectTitle\n        };\n\n        console.log(\"What's updateObj?\", updateObj);\n\n        return firebase.database().ref().update(updateObj, callback);\n    },\n\n    updateIntentionNote(projectKey, intentionIndex, noteText, callback) {\n        console.log(\"Database.updateIntentionNote\");\n\n        const userid = firebase.auth().currentUser.uid;\n\n        let updateObj = {\n            ['projects/' + userid + \"/\" + projectKey + '/intentions/' + intentionIndex + '/note/text']: noteText\n        };\n\n        console.log(\"What's updateObj?\", updateObj);\n\n        return firebase.database().ref().update(updateObj, callback);\n    },\n\n    /*\n     * Replaces the todos array for an intention with a new todos array\n     * @param projectKey:String - The key associated with the project\n     * @param intentionIndex:Number - The index of the intention to update\n     * @param todos:Array<Object> - The new todos array\n     * @return Void\n     */\n    replaceTodos(projectKey, intentionIndex, todos, callback) {\n\n        const userid = firebase.auth().currentUser.uid;\n\n        let unCompletedTodos = 0,\n            completedTodos = 0;\n\n        todos.forEach(todo => {\n            if (todo.isCompleted) {\n                completedTodos += 1;\n            } else {\n                unCompletedTodos += 1;\n            }\n        });\n\n        let updateObj = {\n            ['projects/' + userid + \"/\" + projectKey + '/intentions/' + intentionIndex + '/todos']: todos,\n\n            ['projects/' + userid + \"/\" + projectKey + '/completedTodos']: completedTodos,\n            ['projectList/' + userid + \"/\" + projectKey + '/completedTodos']: completedTodos,\n\n            ['projects/' + userid + \"/\" + projectKey + '/unCompletedTodos']: unCompletedTodos,\n            ['projectList/' + userid + \"/\" + projectKey + '/unCompletedTodos']: unCompletedTodos\n        };\n\n        return firebase.database().ref().update(updateObj, callback);\n    },\n\n    /* A wrapper function for logging the user in */\n    loginInUser(email, password, errorCallback) {\n        firebase.auth().signInWithEmailAndPassword(email, password).catch(function (error) {\n            console.log(\"There was an error when logging in.\");\n            console.log(\"error\", error);\n            errorCallback(error.message);\n        });\n    },\n\n    signUpUser(email, password, errorCallback) {\n        firebase.auth().createUserWithEmailAndPassword(email, password).catch(function (error) {\n            errorCallback(error.message);\n        });\n    }\n};"]}